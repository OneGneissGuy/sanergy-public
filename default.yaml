#####################################################
#          UChicago Data Science for Social Good:   #
#              Optimizing Waste Collection          #
#               from Portable Sanitation            #
#####################################################



############################
# Database column names    #
############################

cols:
  toiletname: "ToiletID" #the name of the toilet / toilet identifier
  date: "Collection_Date" # date / date identifier
  feces: "FecesContainer_percent" #How full the container will be
  urine: "UrineContainer_percent"
  feces_collect: "" #Should the toilet be collected?
  urine_collect: ""
  #WASTE = {"feces": FECES, "urine": URINE} # Either feces or urine
  #COLLECT = {"feces": FECES_COLLECT, "urine": URINE_COLLECT}


#################################
# Feature/response generation parameters #
#################################

#Connection parameters
db:
    #connection: conn
    table: 'toiletcollection'
    database: 'premodeling'
#The model matrix
Xy:
    response:
      #variable: 'Feces_kg_day'
      #split: []
      type: 'binary'
      variable: 'FecesContainer_percent'
      split:
        and: [['>','100']]
    features:
      Total_Waste_kg_day: []
      Urine_kg_day: []
      sd_wind_speed_rate: []
      sd_sea_level_pressure: []
      sd_precipitation_6hr: []
      sd_air_temp: []
      min_wind_speed_rate: []
      min_sea_level_pressure: []
      min_precipitation_6hr: []
      min_air_temp: []
      max_wind_speed_rate: []
      max_sea_level_pressure: []
      max_precipitation_6hr: []
      max_air_temp: []
      mean_wind_speed_rate: []
      mean_sea_level_pressure: []
      mean_precipitation_6hr: []
      mean_air_temp: []
      SubAreaName: []
      School_Closure: []
      Route_Name: []
      OpportunityName: []
      OpeningTime: []
      Missed_Collection_Code: []
      FranchiseType: []
      ClosingTime: []
    unique:
      ToiletID: []
      Collection_Date: []
    lagged:
      Feces_kg_day:
          function: 'lag'
          rows: [1,2,3]
      Urine_kg_day:
          function: 'lag'
          rows: [1,2,3]
          #rows: [1,2,3]

############################
# Model parameters         #
############################
#model: ["LinearRegression", "RandomForest", "Autoregression", "SimpleModel"]
model: ["RandomForest"]

parameters:
  RandomForest:
    n_estimators: [10]
    max_depth: [3]
    max_features: [8]
    criterion: ['entropy']
    min_samples_split: [10]
    # n_estimators: [1, 10, 25, 50, 100]  # [1000, 10000]
    # max_depth: [1, 3, 5, 10, 20]  # 50, 100
    # max_features: ['sqrt', 'log2']  # [2, 4, 8, 16, "auto"]
    # criterion: ['gini', 'entropy']
    # min_samples_split: [2, 5, 10]
  Autoregression:
    maxlag: [3]
    #maxlag: [5, 10]
  LinearRegression:
    dummy: [1] #A fake parameter making sure that we loop over this model.
  Lasso:
    alpha: [0.1] # The alpha parameter controls the degree of sparsity of the coefficients estimated.
  
cv:
  start_date: '2014-01-01'
  end_date: '2014-03-01'
  train_on:
    days: 0
    weeks: 5
  test_on:
    days: 0
    weeks: 1

#############################
# Implementation parameters #
#############################
implementation:
  loss: ['0-1'] #["L2", "L1"]
  prediction_horizon: [1] #How many days
  prediction_weekday_start: [0] #Which day of the week do we recompute the schedule? 0=Mon, 7=Sun. Applicable for weekly or multiple-thereof schedules.
  aggregation_measure: ["mean"] #A measure to use to aggregate the losses across different folds. Since different experiments may have different numbers of folds, should be a probability measure.
